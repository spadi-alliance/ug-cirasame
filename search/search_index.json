{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>CIRASAME is a readout electronics for multi-MPPCs using CITIROC 1A ASIC. This board is dedicated to readout 8x8 (64ch) array type MPPC with SAMTEC ST4-20-1.00-L-D-P-TR connectors, such as S13361-2050AE-08. To readout other MPPCs, an intermediate board changing a connector type is necessary.</p>"},{"location":"#links","title":"Links","text":"<ul> <li>Open-It project</li> </ul>"},{"location":"#update-history","title":"Update history","text":"<p>2025.05.29</p> <ul> <li>Descriptions for firmware section</li> </ul> <p>2025.01.07</p> <ul> <li>Descriptions for StrLRTDC-10G in the firmware section</li> </ul> <p>2024.11.13</p> <ul> <li>Descriptions for CitirocControlSoft in the software section</li> </ul> <p>2024.6.4</p> <ul> <li>Descriptions for Hardware, firmware, software, and practical usage</li> </ul>"},{"location":"firmware/skeleton/skeleton/","title":"Skeleton firmware","text":""},{"location":"firmware/skeleton/skeleton/#overview","title":"Overview","text":"<p>CIRASAME skeleton is a template firmware including only some basic functions. It does not contains the functionalities for clock synchronization and data acquisition. This is basically the same as the AMANEQ skeleton, but it has some dedicated functions for the CIRASAME board. See also the user guide for the AMANEQ firmware overview and the AMANEQ skeleton.</p> <p>Github repository</p> <pre><code>- Unique ID:                  0x413E\n\n- Link protocol:              SiTCP\n- Default IP:                 192.168.10.16\n- Data link speed:            1Gbps\n</code></pre>"},{"location":"firmware/skeleton/skeleton/#history","title":"History","text":"Version Date Changes v2.0 2024.6.4 De facto first version"},{"location":"firmware/skeleton/skeleton/#functions","title":"Functions","text":"Figure\u00a01: Block diagram of skeleton firmware <p>The CIRASAME skeleton firmware includes some dedicated local bus modules for operating MPPCs and CITIROCs in addition to the common modules. The APD bias IC, MAX1932, is controlled through the MAX1932 Controller. CITIROCs are controlled by the CITIROC Controller. To access this module, the dedicated software is necessary. Please see the software section. The comparator outputs from CITIROCs are connected to the IO manager selecting one of them to output from the NIM-OUT1 output.</p> <p>For the charge measurement, the CITIROC requires a HOLD signal to keep the signal peak height during the ADC readout process. The HOLD signal input from the NIM-IN2 is delayed with 2ns steps to adjust the hold timing. The analog output for high-gain side is fed into AD9220 ADC, and the data digitized are collected by the AD9220 module in FPGA. ADC data are sent to a PC via not TCP but RBCP in SiTCP. Since the ADC readout function is independent from the LACCP and the Str-TDC, this is not a part of the DAQ functionalities. The developer does not expect that users take ADC data in the physics experiment. It is a kind of the debug function.</p> <p>Please use this firmware for IC initialization, ASIC health checks, etc.</p>"},{"location":"firmware/skeleton/skeleton/#led-and-dip-switch","title":"LED and DIP switch","text":"DIP # Comment 1 SiTCP IP setting 0: Use default IP  1: Use IP address set by users (License is required). 2 Not in use 3 Not in use 4 Not in use"},{"location":"firmware/skeleton/skeleton/#local-bus-modules","title":"Local bus modules","text":"<p>The Str-LRTDC includes 9 local bus modules. The local bus address map is as follows.</p> Local Module Address range Hold Generator 0x1000'0000 - 0x1FFF'0000 AD9220 0x2000'0000 - 0x2FFF'0000 CITIROC Controller 0x3000'0000 - 0x3FFF'0000 IO Manager 0x4000'0000 - 0x4FFF'0000 Scaler 0x8000'0000 - 0x8FFF'0000 MAX1932 Controller 0x9000'0000 - 0x9FFF'0000 CDCE62002 Controller 0xB000'0000 - 0xBFFF'0000 Self Diagnosis System 0xC000'0000 - 0xCFFF'0000 Flash Memory Programmer 0xD000'0000 - 0xDFFF'0000 Bus Controller 0xE000'0000 - 0xEFFF'0000"},{"location":"firmware/skeleton/skeleton/#citiroc-control","title":"CITIROC Control","text":""},{"location":"firmware/skeleton/skeleton/#citiroc-controller","title":"CITIROC Controller","text":"<p>The CITIROC has a SPI port for register setting, and the CITIROC Controller provides the SPI data and the clock signal for this port. Since the SPI ports are connected in series, all the CITIROCs are set to register at once. Users who are familiar with CITIROC will notice that they can perform register read-back by monitoring the SRO signal, but such a function is not implemented in CIRASAME.</p> <p>The dedicated software to use the CITIROC Controller is prepared, please use that. The author feels that it is not realistic to access this module using only write/read_register.</p> Register name Address Read/Write Bit width Comment kAddrSCFIFO 0x80000000 W 1 Write SPI data to the buffer kAddrPDC 0x80100000 W 2 Update the pin direct control registers kAddrCC 0x80200000 W - Start a SPI cycle"},{"location":"firmware/skeleton/skeleton/#adc-readout","title":"ADC readout","text":"<p>Since the ADC readout function is developed as a debug tool, this function is not well matured. The J-PARC E50 member can skip this sub-section. It is designed to collect ADC data with low rate trigger input in a stand-alone mode. Data taking with multiple boards are not considered since the hardware busy is not implemented. The author emphasize that it is a debug tool, please do not use it for physics experiments.</p>"},{"location":"firmware/skeleton/skeleton/#hold-generator","title":"Hold Generator","text":"<p>The charge measurement method of CITIROC is peak height hold. Voltage when receiving the HOLD signal is kept in a capacitance in CITIROC, and then stored DC voltage is multiplexed and digitized by AD9220 channel by channel. To hold the pulse peak position, users need to send the HOLD signal at appropriate timing. As shown in the figure, the pulse height is held while the HOLD signal takes a logic high. Note that only the analog output is affected by the HOLD signal, the slow shaper output from the probe port is not held even you input the HOLD signal because the probe line is branched before the HOLD function.</p> Figure\u00a02: Analog output with HOLD signal and slow shaper output from probe output. <p>Then, users need to adjust the HOLD signal timing precisely so that the HOLD signal is input just at the pulse peaking timing. The Hold Generator is used for this purpose, and it can provide 64ns delay amount in maximum with 2ns steps. This unit has 32-bit length mask register, which determines the delay amount. The incoming pulse runs from the left side as shown in the figure. When the pulse reaches the bit position where the bit is set to 1, the delayed HOLD signal takes a logic 1. Please fill 1 continuously from the MSB side of the mask register, and the longer the length of 1 gives the smaller delay amount.</p> <p>The delayed HOLD signal is then output from the NIM-OUT-2.</p> Figure\u00a03: Relation between delay amount and mask register pattern. <p>The register address map of the Hold Generator is as follows.</p> Register name Address Read/Write Bit width Comment kAddrDelayMask 0x10000000 R/W 32 Delay mask register"},{"location":"firmware/skeleton/skeleton/#ad9220","title":"AD9220","text":"<p>The AD9220 module reads the data from the ADC (AD9220) on the board. Note that only the high-gain side can be reed. This modules requires the delayed HOLD signal from the Hold Generator. Please set the mask register to the Hold Generator before accessing this module. Although the data readout trigger to this module is the HOLD signal, it does not start the data read cycle only with the HOLD signal input. To start the read cycle, users need to open the daq gate through RBCP. Thus, the procedure for the ADC data read is as follows.</p> <ol> <li>Set and adjust the mask register for the Hold Generator</li> <li>Open the daq gate</li> <li>Check the event buffer status</li> <li>If an event exists, read an event from the buffer</li> <li>Repeat No.3 and 4</li> <li>Close the daq gate when stopping data taking</li> </ol> <p>The simple software to read ADC data is prepared in cirasame-soft.</p> <p>The register address map of the AD9220 module is as follows.</p> Register name Address Read/Write Bit width Comment kAddrDaqGate 0x20000000 R/W 1 DAQ gate bit kAddrEventFull 0x20100000 R 1 Flag indicating event existence kAddrReadFIFO 0x21000000 R 8 Data read from the event buffer kAddrReleaseBusy 0x22000000 W - Manual busy release. Use this if the read sequencer is dead locked."},{"location":"firmware/skeleton/skeleton/#data-structure","title":"Data structure","text":"<p>The data word size is 16 bit. The data structure is extremely simple, with the ADC data simply arranged in order from channel 0 of ASIC 0. The 13th bit, the OTR flag, indicates that the ADC has overflowed. Since the CITIROC has a thermometer connected to channel 33, the number of data words from one ASIC is 33. In other words, 132 words are read out in one read operation. No header or trailer is added. Please note that the temperature reading here is not correct at all. The CIRASAME firmware is not designed to read the CITIROC thermometer.</p> <pre><code>MSB                                                   LSB\n[    3-bit    ][    1-bit    ][        12-bit        ]\n  Zero padding       OTR              ADC value\n\n1st word:   CITIROC0 ch0\n2nd word:   CITIROC0 ch1\n...\n33th word:  CITIROC0 thermometer\n34th word:  CITIROC1 ch0\n35th word:  CITIROC1 ch1\n...\n132th word: CITIROC3 thermometer\n</code></pre>"},{"location":"firmware/skeleton/skeleton/#mppc-bias-supply","title":"MPPC bias supply","text":""},{"location":"firmware/skeleton/skeleton/#max1932-controller","title":"MAX1932 Controller","text":"<p>This module provides the SPI interface for a MAC1932 IC, which is a bias supply for MPPCs. The MAX1932 IC can bias sensors between 40V - 70V with 256 (8-bit) steps. The register value 1 provides the maximum voltage of 70V, output voltage decreases as a function of the register value. Note that the maximum voltage is not exactly 70V, and it has board dependence, probably. If users want to know the exact output voltage, please measure it by a multimeter. If you set the register value 0, the IC is turned off, and output voltage goes 0V.</p> Register name Address Read/Write Bit width Comment kAddrTxd 0x90000000 W 1 8-bit register to MAX1923 kAddrExecWrite 0x91000000 W - Execute SPI sequence"},{"location":"firmware/skeleton/skeleton/#signal-selection","title":"Signal selection","text":""},{"location":"firmware/skeleton/skeleton/#io-manager","title":"IO Manager","text":"<p>This modules selects one of the comparator outputs from CITIROCs, and the selected one is output from NIM-OUT-1. The value set to kAddrSelDiscri represents the selected channel.</p> Register name Address Read/Write Bit width Comment kAddrSelDiscri 0x40000000 W 7 7-bit channel number (default: 0x0)"},{"location":"firmware/strlrtdc/strlrtdc/","title":"Streaming low-resolution TDC","text":""},{"location":"firmware/strlrtdc/strlrtdc/#overview","title":"Overview","text":"<p>The CIRASAME streaming low-resolution TDC (CIRASAME Str-LRTDC) is a continuous readout TDC with 1ns timing precision. The main functionalities for data acquisition is the same as those of the AMANEQ Str-LRTDC. Please understand the AMANEQ Str-LRTDC before reading this user guide. See also the overview section of the AMANEQ firmware. In this user guide, the CIRASAME Str-LRTDC is simply called as Str-LRTDC.</p> <p>Github repository</p> <pre><code>- Unique ID:                  0x6041\n\n- Number of inputs:           128\n- Timing measurements:        Both edges\n- TDC precision:              1ns\n- Double hit resolution:      ~8ns\n- Max TOT length:             4000ns\n\n- Link protocol:              SiTCP\n- Default IP:                 192.168.10.16\n- Data link speed:            1Gbps\n\n- Data word width:            64bit\n- Acceptable max input rate:  ~14MHz/board\n- System clock freq.:         125MHz\n</code></pre>"},{"location":"firmware/strlrtdc/strlrtdc/#history","title":"History","text":"Version Date Changes v2.8 2025.5.29 - Bugfix version of v2.7  - Fixed the bug that the delay function for the trigger assisted mode does not work. v2.7 2025.3.5 - Bugfix version of v2.6  - Enabling the function to generate data words with input throttling type-2 start/end data types. v2.6 2025.1.7 - Updating LACCP (v2.1) supporting the frame flag distribution.  - Introducing gated scaler. v2.5 2024.6.4 \u4e8b\u5b9f\u4e0a\u306e\u521d\u671f\u7248"},{"location":"firmware/strlrtdc/strlrtdc/#functions","title":"Functions","text":"Figure\u00a01: Simplified block diagram of Str-LRTDC. <p>The figure shows the simplified block diagram of CIRASAME Str-LRTDC firmware. Unnecessary blocks not related to the DAQ functions are omitted for the figure. The DAQ functionalities are basically the same that of AMANEQ Str-LRTDC. The difference is the the number of input channels of 128 and existence of the IO manager.</p> Figure\u00a02: Port map of Str-LRTDC <p>The figure represents assignment of the TDC channel and the port number of the MIKUMARI link. In this firmware, the channel number 0 is assigned to the MIKUMARI secondary (RX). About the relation between the MPPC channel numbers and the TDC channel numbers, see also the MPPC sub-section in the hardware section.</p>"},{"location":"firmware/strlrtdc/strlrtdc/#dip-switch","title":"DIP switch","text":"DIP # Comment 1 SiTCP IP setting 0: Use default IP  1: Use IP address set by users (License is required). 2 Not in use 3 Standalone mode 0: Use the MIKUMARI system1: 1: Standalone mode 4 Not in use"},{"location":"firmware/strlrtdc/strlrtdc/#local-bus-modules","title":"Local bus modules","text":"<p>The Str-LRTDC includes 11 local bus modules. The local bus address map is as follows.</p> Local Module Address range Mikumari Utility 0x0000'0000 - 0x0FFF'0000 Hold Generator 0x1000'0000 - 0x1FFF'0000 AD9220 0x2000'0000 - 0x2FFF'0000 CITIROC Controller 0x3000'0000 - 0x3FFF'0000 IO Manager 0x4000'0000 - 0x4FFF'0000 Streaming TDC 0x5000'0000 - 0x5FFF'0000 Scaler 0x8000'0000 - 0x8FFF'0000 MAX1932 Controller 0x9000'0000 - 0x9FFF'0000 CDCE62002 Controller 0xB000'0000 - 0xBFFF'0000 Self Diagnosis System 0xC000'0000 - 0xCFFF'0000 Flash Memory Programmer 0xD000'0000 - 0xDFFF'0000 Bus Controller 0xE000'0000 - 0xEFFF'0000"},{"location":"firmware/strlrtdc/strlrtdc/#streaming-tdc-block","title":"Streaming-TDC block","text":"<p>The streaming low-resolution TDC implemented is the completely the same that of the AMANEQ Str-LRTDC. See the AMANEQ user guide. Only the local bus addresses are different from those of AMANEQ's firmware.</p>"},{"location":"firmware/strlrtdc/strlrtdc/#register-address-map","title":"Register address map","text":"Register name Address Read/Write Bit width Comment kTdcMaskMainU 0x5000'0000 W/R 32 Channel mask for 0-31ch    (default: 0x0) kTdcMaskMainD 0x5010'0000 W/R 32 Channel mask for 32-63ch   (default: 0x0) kTdcMaskMznU 0x5020'0000 W/R 32 Channel mask for 64-95ch   (default: 0x0) kTdcMaskMznD 0x5030'0000 W/R 32 Channel mask for 96-127ch  (default: 0x0) kTdcMaskEx 0x50E0'0000 W/R 32 Channel mask for 128-159ch (default: 0x0) kEnBypass 0x5040'0000 W/R 3 Enable bypass for 2-us delay buffer and paring unit. (default: 0x0)  1st-bit: Enable bypass for 2-us delay buffer  2nd-bit: Enable bypass for paring unit  3rd-bit: Disable the LACCP fine offset correction. If disabling it, non-zero value appears in the LACCP fine offset region in 1st delimiter word. kTotFilterCtrl 0x5050'0000 W/R 2 Enable TOT filter. (default: 0x0)  1st-bit: Enable TOT filter unit  2nd-bit: Enable zero-TOT through mode kTotMinTh 0x5060'0000 W/R 16 TOT filter low threshold kTotMaxTh 0x5070'0000 W/R 16 TOT filter high threshold kTrgAssistCtrl 0x5080'0000 W/R 2 Set trigger assisted mode. (default: 0x0)  1st-bit: Enable trigger gate mode  2nd-bit: Enable Veto gate mode kTrgAssistDelay 0x5090'0000 W/R 8 Set the delay from the trigger (veto) input to opening the trigger (veto) gate. LSB precision is 8ns. kTrgAssistWidth 0x50A0'0000 W/R 16 Set the trigger (veto) gate width. LSB precision is 8ns. kHbfThrottCtrl 0x50B0'0000 W/R 4 Set the heartbeat frame throttling condition.  0x0: Disable (default)  0x1: Only data for frame numbers that are multiples of 2 is acquired.  0x2: Only data for frame numbers that are multiples of 4 is acquired.  0x4: Only data for frame numbers that are multiples of 8 is acquired.  0x8: Only data for frame numbers that are multiples of 16 is acquired. kHbdUserReg 0x50C0'0000 W 16 The register value to be embedded to the 2nd delimiter word. kSelfRecoveryMode 0x50D0'0000 W/R 1 Enable the automatic recovery process for the local heartbeat frame mismatch (default: 0x0)."},{"location":"firmware/strlrtdc/strlrtdc/#scaler","title":"Scaler","text":"<p>The scaler implemented is the completely the same that of the AMANEQ Str-LRTDC. See the AMANEQ user guide.</p>"},{"location":"firmware/strlrtdc/strlrtdc/#adc-readout","title":"ADC readout","text":"<p>This function will be removed from this firmware in the future update.</p>"},{"location":"firmware/strlrtdc/strlrtdc/#io-manager","title":"IO Manager","text":"<p>The IO manager controls the path to NIM-OUT1 and 2. The discriminator signals from CITIROCs are arranged to the NIM-OUT1. This is the same that of Skeleton. In addition, DAQ signals are arranged to the NIM-OUT2, and users can select one from the laccp trigger signal, the heartbeat signal, and the TCP connection status signal.</p>"},{"location":"firmware/strlrtdc/strlrtdc/#register-address-map_1","title":"Register address map","text":"Register name Address Read/Write Bit width Comment kAddrSelDiscri 0x40000000 W 7 7-bit channel number (default: 0x0) kAddrDaqSig 0x40100000 W 3 DAQ signal selection (default: 0x0) kAddrOnOf 0x40200000 W 2 Enable/Disable of outputs. (default: 0x0) <p>Supplementary explanation</p> <ul> <li>AddrDaqSig<ul> <li>0x0: LACCP trigger signal</li> <li>0x1: Heartbeat signal</li> <li>0x2: TCP connection status signal</li> </ul> </li> <li>AddrOnOff<ul> <li>1st-bit: Enable/Disable NIM-OUT1 (1: enable).</li> <li>2nd-bit: Enable/Disable NIM-OUT2 (1: enable).</li> </ul> </li> </ul>"},{"location":"firmware/strlrtdc-10g/strlrtdc-10g/","title":"Streaming low-resolution TDC with SiTCP-XG","text":""},{"location":"firmware/strlrtdc-10g/strlrtdc-10g/#overview","title":"Overview","text":"<p>The CIRASAME streaming low-resolution TDC with SiTCP-XG (CIRASAME Str-LRTDC 10G) is a continuous readout TDC with 1ns timing precision. This firmware is basically the same as CIRASAME Str-LRTDC, but the data link protocol is replaced with SiTCP-XG. In this user guide, the CIRASAME Str-LRTDC 10G is simply called as Str-LRTDC-10G.</p> <p>Github repository</p> <pre><code>- Unique ID:                  0x7041\n\n- Number of inputs:           128\n- Timing measurements:        Both edges\n- TDC precision:              1ns\n- Double hit resolution:      ~8ns\n- Max TOT length:             4000ns\n\n- Link protocol:              SiTCP-XG\n- Default IP:                 192.168.10.10\n- Data link speed:            10Gbps\n\n- Data word width:            64bit\n- Acceptable max input rate:  ~125MHz/board\n- System clock freq.:         125MHz\n</code></pre>"},{"location":"firmware/strlrtdc-10g/strlrtdc-10g/#history","title":"History","text":"Version Date Changes v2.2 2025.5.29 - Bugfix version of v2.1  - Fixed the bug that the delay function for the trigger assisted mode does not work. v2.1 2025.3.5 - Bugfix version of v2.0.  - Enabling the function to generate data words with input throttling type-2 start/end data types. v2.0 2025.1.7 First release version"},{"location":"firmware/strlrtdc-10g/strlrtdc-10g/#functions","title":"Functions","text":"<p>The internal function is completely the same as that of CIRASAME Str-LRTDC, but some unnecessary functions such as ADC readout are omitted. See the description about that.</p>"},{"location":"firmware/strlrtdc-10g/strlrtdc-10g/#local-bus-modules","title":"Local bus modules","text":"<p>The Str-LRTDC-10G includes 8 local bus modules. The local bus address map is as follows.</p> Local Module Address range Mikumari Utility 0x0000'0000 - 0x0FFF'0000 CITIROC Controller 0x3000'0000 - 0x3FFF'0000 IO Manager 0x4000'0000 - 0x4FFF'0000 Streaming TDC 0x5000'0000 - 0x5FFF'0000 Scaler 0x8000'0000 - 0x8FFF'0000 MAX1932 Controller 0x9000'0000 - 0x9FFF'0000 Self Diagnosis System 0xC000'0000 - 0xCFFF'0000 Flash Memory Programmer 0xD000'0000 - 0xDFFF'0000 Bus Controller 0xE000'0000 - 0xEFFF'0000"},{"location":"hardware/cirasame/cirasame/","title":"CIRASAME board","text":"<p>CIRASAME (CITIROC based multi-MPPC readout electronics for continuous timing measurement) is a readout board for multi-MPPCs using CITIROC 1A ASICs. This is dedicated electronics to readout scintillating fiber trackers for the J-PARC E50 experiment, and is designed as an on-detector type electronics to be attached to those detectors. But, it can readout others detectors equipped with MPPCs. This board design is sophisticated for implementing a streaming readout TDC since the J-PARC E50 experiment uses a trigger-less data-streaming type DAQ system.</p> <ul> <li>Manufacturer: \u6709\u9650\u4f1a\u793e\u30b8\u30fc\u30fb\u30a8\u30cc\u30fb\u30c7\u30a3\u30fc</li> <li>Product No: GN-2107-3</li> </ul> <p>The figure shows the photograph of the CIRASAME board. CIRASAME is a 128 mm x 200 mm sized readout board with connectors on the back of the board for mounting an MPPC. The MPPC connector position is designed to mount HAMAMATSU S14826(ES1), which is special order product. See the MPPC section for information on MPPC and ASIC channel mapping. CIRASAME has a SFP+ port for a data link, a JTAG port, NIM IO, analog output ports, a MIKUMARI port for clock synchronization, and a power connector. The FPGA mounted on the board is AMD Xilinx Kintex-7 FPGA (XC7K-160T-2FFG676C), which is the same as that of AMANEQ. This board has the same a jitter (CDCE62002) and 2Gb DDR3-SDRAM as those on AMANEQ. Thus, the digital part of CIRASAME is based on the design of AMANEQ, it uses many same ICs. CIRASAME also has dedicated functionalities for operating MPPCs, i.e., an APD bias supply IC (MAX19232ETC+T). Please also see the AMANEQ user guide.</p> Figure\u00a01: Picture of CIRASAME GN-2107-3 <p>The specification is summarized as follows.</p> <ul> <li>Size: 128 mm (H) x 200 mm (V)</li> <li>Num of MPPCs: 2 (S14826(ES1) x2)</li> <li>128ch in total</li> <li>If you prepare an intermediate board changing a connector type, other types of MPPCs can be read.</li> <li>ASIC: Weeroc/Omega CITIROC 1A BGA x4</li> <li>Bias: MAX1932ETC+T</li> <li>Supply range: 40-70V (256 steps)</li> <li>Maximum output current: 2.5 mA</li> <li>Analog outputs:</li> <li>One analog high-gain output from CITIROC</li> <li>One probe output from CITIROC</li> <li>FPGA: AMD Xilinx XC7K-160T-2FFG676C</li> <li>Flash memory: CYPRESS S25FL128SAGMFIR01</li> <li>Data links: SFP+ (10 Gbps in maximum)</li> <li>Link media depends on the type of SFP modules.</li> <li>Clock synchronization: One MIKUMARI port (SFP)</li> <li>Num of NIM input: 1 (LEMO)</li> <li>Num of NIM output: 1 (LEMO)</li> <li>Power supply: 20-35V DC</li> <li>Jack: 2.10mm ID, 5.50mm OD</li> <li>Main connector: \u65e5\u672c\u5727\u7740\u7aef\u5b50 S2P-VH(LF)(SN)</li> <li>Note that the connector is different from that on AMANEQ</li> <li>Fuse limit: 1A</li> <li>Fuse product: Littelfuse 0251001.NRT1L</li> <li>Num of DIP switch bits: 4</li> <li>Clock generator IC: TI CDCE62002</li> <li>External memory: 2Gb DDR3-SDRAM</li> <li>Speed: DDR3-1333 (max)</li> </ul> Figure\u00a02: Block diagram of GN-2006-4 <p>MPPCs are biased by the MAX1932 bias supply, which is controlled by FPGA. It can control output voltage with 256 steps between 40V to 70V. The MPPC signal lines are parallel terminated with 100 ohm registers together with 0.22 uF capacitances for DC blocking. The MPPC signals are fed into four CITIROCs, and are amplified, shaped, and discriminated in CITIROC. For details of this ASIC, please see its data sheet. The comparator (discriminator) outputs are input in parallel to the FPGA. The signals are input to the streaming TDC and the scaler in the FPGA.</p> <p>Since this board aims to have the function for the streaming TDC, the design of a charge measurement line is rather simplified. Only the analog output for the high-gain side is arranged to ADC (AD9220) and to the analog output port with the LEMO type connector. Since the analog output of the CITIROC without setting a read register bit becomes high impedance, four outputs are simply merged to one line. The probe output from CITIROC are once connected to an analog switch controlled by the FPGA, and its output is arranged to the LEMO type connector. The developer expects that these analog lines are used only for checking the signals using an oscilloscope. The charge measurements with the DAQ function is not considered.</p> <p>In the figure, the ASIC control lines from the FPGA are omitted.</p>"},{"location":"hardware/cirasame/cirasame/#board-interface","title":"Board interface","text":""},{"location":"hardware/cirasame/cirasame/#mppc-connector","title":"MPPC connector","text":"Figure\u00a03: Dimension drawing viewed from the solder side. <p>The figure is the dimension drawing around the MPPC connectors when you view it from the solder side. As mentioned above, this board is design to mount S14826(ES1), which is the special order product, not on the catalog. Please contact with HPK if you order the same one. If you need to readout other MPPC products using CIRASAME, please develop a board changing connector type based on this drawing.</p>"},{"location":"hardware/cirasame/cirasame/#vccad-selection-switch","title":"VCCAD selection switch","text":"Figure\u00a04: VCCAD voltage selection switch. <p>Please short-circuit the 1.8V side pins as shown in the figure.</p>"},{"location":"hardware/cirasame/cirasame/#mppc-bias","title":"MPPC bias","text":"Figure\u00a05: MPPC bias supply. <p>When you use MAX1932 as the MPPC bias supply, pleas short-circuit the left side jumper pins. If you want to supply bias externally, please short-circuit the right side pins, and connect the bias cable to the MMCM connector.</p> <p>The maximum output current is 2.5 mA.</p>"},{"location":"hardware/cirasame/cirasame/#sfp-1","title":"SFP-1","text":"<p>The SFP-1 port is for a data link of which the speed is 10 Gbps in maximum. The SFP and SFP+ modules are applicable but the link speed depends on firmware. As this port is the same as that on AMANEQ, please also see the AMANEQ user guide.</p>"},{"location":"hardware/cirasame/cirasame/#dip-led","title":"DIP, LED","text":"Figure\u00a06: DIP switch <p>The DIP switch is set to the left side where \"ON\" is printed, a logic 0 is taken in the FPGA. The function of each bit depends on each firmware.</p> <p>There is no LED on CIRASAME even for indicating FPGA configuration done since CIRASAME is expected to be installed in a black box together with a detector. Item emitting light is omitted.</p>"},{"location":"hardware/cirasame/cirasame/#nim","title":"NIM","text":"Figure\u00a07: NIM IO ports and jumper pins. <p>Two LEMO connectors are assigned for NIM I/O, but two logic input lines and two logic output lines are assigned on the FPGA. The signal path arrangement is determined by the jumper pins shown in the orange box in the figure. In this figure, the output-1 and the input-2 are arranged to the LEMO connectors. The upper and lower connectors are for signal-1 and signal-2, respectively. The NIM IO uses the same logic translation ICs as those on AMANEQ. See also the AMANEQ user guide.</p>"},{"location":"hardware/cirasame/cirasame/#power-supply","title":"Power supply","text":"<p>The power supply connector is \u65e5\u672c\u5727\u7740\u7aef\u5b50 S2P-VH(LF)(SN). There is a rule for power on/off process. Please see the AMANEQ user guide.</p>"},{"location":"hardware/cirasame/cirasame/#mikumari-port","title":"MIKUMARI port","text":"<p>This is the same that of the AMANEQ. Please see the AMANEQ user guide.</p>"},{"location":"hardware/cirasame/cirasame/#board-ics","title":"Board ICs","text":"<p>The FPGA, the jitter cleaner IC, the DDR3-SDRAM, and the flash memory are the same those on AMANEQ. Please see the AMANEQ user guide.</p>"},{"location":"hardware/cirasame/cirasame/#power-supply-ics","title":"Power supply ICs","text":"Figure\u00a08: 1.0V power IC <p>The external DC voltage supply of 35V CIRASAME uses the LT8612UDE to step down the external input of 35V to 5V, and then further steps it down to multiple power supply voltages. A test pint are located near by each power supply IC as shown in the figure. Please confirm that every output voltage is correct after board delivery.</p> Silk print Voltage Parts number Test pint number +5V +5.0V U47 Nothing +3V3D +3.3V U43 TP34 +1V8D +1.8V U41 TP33 +1V0D +1.0V U42 TP32 +1V8GTX +1.8V U46 TP37 +1V2GTX +1.2V U44 TP35 +1V05GTX +1.05V U45 TP36 -3V3D -3.0V U7 Nothing +3V3A +3.3V U39 TP30 VCCAD +1.8V U40 TP31"},{"location":"practical/practical/","title":"Practical usage","text":"<p>Please read the AMANEQ user guide. All the things written in the AMANEQ practical section are also important for CIRASAME.</p>"},{"location":"practical/practical/#initial-startup-procedures","title":"Initial startup procedures","text":"<p>When powering up CIRASAME for the first time, please initialize CDCE62002 according to the following procedure</p> <ul> <li>Download CIRASAME skeleton firmware to FPGA</li> <li>Set the following registers using set_cdce62002 in hul-common-lib</li> </ul> <p><code>set_cdce62002 [ip address] in_125_out_500_125</code></p> <ul> <li>Confirm with a tester that 1.5V is output from +1V5D.</li> <li>Turn off the power and short-circuit J1 as shown in the figure.</li> </ul> Figure\u00a01: Short-circuit J1"},{"location":"release/release/","title":"Release notes","text":""},{"location":"release/release/#may-29-2025","title":"May 29, 2025","text":""},{"location":"release/release/#new-bugfix","title":"New + Bugfix","text":"<ul> <li>Bugfix for previous version<ul> <li>Rename \"trigger emulation mode\" as \"trigger assisted mode\".</li> <li>The delay function of the trigger gate generator for the trigger assisted mode does not work due to bug. It is fixed.</li> </ul> </li> <li>New firmware<ul> <li>CIRASAME-StrLRTDC v2.8</li> <li>CIRASAME-StrLRTDC-10G v2.2</li> </ul> </li> </ul>"},{"location":"release/release/#mar-5-2025","title":"Mar. 5, 2025","text":"<ul> <li>Bugfix for previous version<ul> <li>All firmware released on Jan. 7 have critical bugs.</li> <li>So far the function to insert throttling start/end words in the input throttling type-2 unit has not been working. Now that the feature is enabled, a word is generated with input throttling type-2 start/end data types to indicate that the throttling feature is working.</li> </ul> </li> <li>New firmware<ul> <li>CIRASAME-StrLRTDC v2.7</li> <li>CIRASAME-StrLRTDC-10G v2.1</li> </ul> </li> </ul>"},{"location":"release/release/#jan-7-2025","title":"Jan. 7, 2025","text":""},{"location":"release/release/#newimproved","title":"New+Improved","text":"<ul> <li>New function of LACCP distributing frame flags<ul> <li>LACCP can distribute 2-bits frame flags. The flags are embedded into the flags regions in the heartbeat frame delimiter word.</li> <li>The users can embed external condition such as gates into the heartbeat frame.</li> </ul> </li> <li>Gated scaler<ul> <li>Two scaler units gated by the frame flags are added. Totally, 3 scaler units exist in firmware.</li> <li>Gated scaler counts up while the frame flag takes 1.</li> </ul> </li> <li>New firmware<ul> <li>CIRASAME-StrLRTDC v2.6</li> <li>CIRASAME-StrLRTDC-10G v2.0 (New release)</li> </ul> </li> </ul>"},{"location":"release/release/#jun-4-2024","title":"Jun. 4, 2024","text":""},{"location":"release/release/#new","title":"New","text":"<ul> <li>De facto release version<ul> <li>CIRASAME Skeleton v2.0</li> <li>CIRASAME-StrLRTDC v2.5</li> </ul> </li> </ul>"},{"location":"software/software/","title":"Software","text":"<p>Here, the author describes the hul-common-lib and the cirasame-soft.</p>"},{"location":"software/software/#hul-common-lib","title":"hul-common-lib","text":"<p>Github repository</p> <p>Since the basic structure of The CIRASAME firmware is the same that of AMANEQ's firmware, the CIRASAME board can be controlled by hul-common-lib. Before reading this section, see the AMANEQ user guide. In this user guide, the author additionally explains about programs for CIRASAME.</p>"},{"location":"software/software/#executable-files","title":"Executable files","text":""},{"location":"software/software/#set_max1932","title":"set_max1932","text":"<p>It can set 8-bit register value to the internal DAC of MAX1932. Usage is as follows.</p> <pre><code>            [IP]          [DAC value]\nset_max1932 192.168.10.16 100\n</code></pre> <p>Please provides the DAC value between 1-255 in decimal notation. If you set 0, the MAX1932 is turned down.</p>"},{"location":"software/software/#cirasame-soft","title":"cirasame-soft","text":"<p>Github repository</p> <p>The cirasame-soft provides programs dedicated for the CIRASAME firmware. It requires hul-common-lib to be complied.</p>"},{"location":"software/software/#executable-files_1","title":"Executable files","text":""},{"location":"software/software/#ad9220","title":"ad9220","text":"<p>This program accesses the AD9220 block in the FPGA and reads out the ADC data for the specified number of events. The data that has just been read is written to the file specified by the argument. As described in the firmware section, no header or trailer words are added to indicate the end of an event. Process every 132 words. This program should not be terminated by Ctrl-C. If users stop it by Ctrl-C, data in the next run will be broken.</p> <p>Example to read 100 events and store them to hoge.dat.</p> <pre><code>       [IP]          [file]   [Events]\nad9220 192.168.10.16 hoge.dat 100\n</code></pre>"},{"location":"software/software/#hgddelay","title":"hgddelay","text":"<p>Please read the Hold Generator sub-section in CIRASAME skeleton firmware section. In this program, the register value given at 2nd argument is transformed to the mask pattern. The value of 1 provides the smallest delay amount, and the delay amount increases as the given value increases. Please set the register value before calling ad9220 program</p>"},{"location":"software/software/#citiroccontrolsoft","title":"CitirocControlSoft","text":"<p>Github repository</p> <p>The CitirocControlSoft is a software dedicated for using the CITIROC Controller module in FPGA firmware. It generates the bit pattern to be sent to CITIROCs from configuration files and sends it to FPGA through RBCP. In CITIROC, there are three categories for control registers.</p> <ul> <li>Slow Control: The biggest category takes an entire ASIC setting such as pre-amplifier gain, shaping constant, discriminator threshold DAC, etc.</li> <li>Read Slow Control: This register bit selects the ASIC channel to be output from the analog output.</li> <li>Probe Register: This register bits arranges the signal path to the probe port.</li> </ul> <p>For more details, please read the CITIROC data sheet.</p> <p>The directory structure is as follows. Please compile the source codes under the <code>src</code> directory, then an executable file, <code>femcitiroc_control</code>, will be generated in the <code>bin</code> directory.</p> <pre><code>.\n\u2514\u2500\u2500 CitirocControlSoft/\n    \u251c\u2500\u2500 bin\n    \u251c\u2500\u2500 default_register\n    \u2514\u2500\u2500 src/\n        \u251c\u2500\u2500 Makefile\n        \u251c\u2500\u2500 BitDump.hh\n        \u251c\u2500\u2500 BitDump.cc\n        \u251c\u2500\u2500 FPGAModule.hh\n        \u251c\u2500\u2500 FPGAModule.cc\n        \u251c\u2500\u2500 RegisterMap.cc\n        \u251c\u2500\u2500 UDPRBCP.hh\n        \u251c\u2500\u2500 UDPRBCP.cc\n        \u251c\u2500\u2500 Uncoyable.hh\n        \u251c\u2500\u2500 configLoader.hh\n        \u251c\u2500\u2500 configLoader.cc\n        \u251c\u2500\u2500 control_impl.hh\n        \u251c\u2500\u2500 control_impl.cc\n        \u251c\u2500\u2500 femcitiroc_control_main.cc\n        \u2514\u2500\u2500 rbcp.h\n</code></pre> <p>Since the Slow Control category contains so many control registers, it is not realistic to manage all of them using a configuration file. Then, a default register bit pattern for Slow Control is hard-coded in the <code>configLoader.cc</code> file. Users can update only the parts they want to change by configuration files. The Read Slow Control and Probe Register bit patterns are 0 in default in source code. They can be also updated by configuration files.</p> <p>When users execute <code>femcitiroc_control</code> without any arguments, usage appears as follows.</p> <pre><code>Usage\n  femcitiroc_control [options...]\n\nOptions:\n -ip=xxx.yyy.zzz.aaa (Must)\n -yaml=file-path\n   If -yaml=auto is designated, this program refers\n   the register files in ${HOME}/vme-easiroc-registers,\n   which are labeled by the ip address.\n   i.e., RegisterValue_aaa.yml, InputDAC_aaa.yml, PedeSup_aaa.yml\n -sc\n   Send slow control registers\n -read\n   Send read slow control registers\n -probe\n   Send probe registers\n -all\n   Equal to -sc -read -probe\n -probe-off\n   Reset probe registers\n -q\n   Quiet. Hide all the message.\n -debug\n   Only parse configuration files, and do not send registers.\n</code></pre> <p>In this program, the option is specified by a word beginning with a hyphen, unlike hul-common-lib and cirasame-soft where the meaning of option is determined by the position of the argument. Specification of ip address is mandatory, and configure files to be read are specified with the <code>-yaml=</code> option. Sine you can take the <code>-yaml=</code> option as many times as you want, it is possible to specify multiple configuration files. The options, <code>-sc, -read, -probe</code>, specify the register categories to be sent. As these categories are independent, you can change a certain category while maintaining other categories are unchanged. Users can take multiple these options at once like <code>-sc -read</code>.</p>"},{"location":"software/software/#configuration-file","title":"Configuration file","text":"<p>If the user does not specify any configuration file by the option, default configuration files existing in the <code>default_register</code> directory are used. At present, three configuration files, <code>RegisterValue.yml, InputDAC.yml, and DiscriMask.yml</code> are prepared. The developer expects that these are examples to make a new configuration file by users. The <code>RegisterValue.yml</code> file contains the Slow Control, Read Slow Control, and probe registers in a file. The <code>InputDAC.yml</code> and <code>DiscriMask.yml</code> contain the Slow Control registers, <code>Input 8-bit DAC</code> and <code>Discriminator Mask</code>, respectively. Although these are a part of the Slow Control category, descriptions are divided to independent files because they require a lot of text lines.</p>"},{"location":"software/software/#registervalueyml","title":"RegisterValue.yml","text":"<pre><code>CITIROC1:\n  PreAMP_HG: HGCf_400fF\n  PreAMP_LG: LGCf_400fF\n  Time Constant HG Shaper: 50.0ns\n  Time Constant LG Shaper: 50.0ns\n  DAC1 code: 1000\n  DAC2 code: 250\n  LG PA bias: weakbias\n  EN_Low_Gain_PA: Disable\n  EN_High_Gain_PA: Enable\n  Fast Shaper on LG: HG\n</code></pre> <p>This is a part of <code>RegisterValue.yml</code> in the default_register directory. Four CITIROCs are labeled as CITIROC1, 2, 3, and 4. Registers in CITIROC is specified by keys such as \"Time Constant HG Shaper\". Alias such as \"50.0ns\" are prepared for some register values. To know the list of keys and alias, please see the source code of <code>configLoader.cc</code>. Since key names come from the register name listed in the CITIROC data sheet, you won't have much trouble finding a desired key. Users can update the default register setting with the value written here.</p> <p>Since the CIRASAME is for the streaming TDC, the hard-coded default register setting is dedicated for this purpose. The functions after the low gain slow shaper are disabled in default because there is no way to use this signal. If you want to see the signal from the slow shaper in the low-gain side, please enable them by adding corresponding register settings. The peak detector is one of feature of CITIROC, but this is also disabled because the charge measurement is not aimed in CIRASAME. The charge measurement for the high-gain side using SCA with the external HOLD signal is selected in default. The fast shaper receives the signal from the high-gain pre-amplifier in default, then the low-gain pre-amplifier is disabled. In addition, weak bias setting is applied to the low-gain pre-amplifier. If users use the low-gain side, please update these setting.</p> <pre><code>High Gain Channel: 32\nProbe Channel: 32\nProbe: Out_fs\nProbe Mux: 2\n</code></pre> <p>At the end of <code>RegisterValue.yml</code>, the register setting for Read Slow Control and Probe categories are written. \"High Gain Channel\" selects the readout channel from the analog output for the high-gain side. Users can select a value between 0 to 127.</p> <p>\"Probe Channel\", \"Probe\", and \"Probe Mux\" are registers for the Probe category. \"High Gain Channel\" selects the readout channel from the probe output. Users can select a value between 0 to 127, but users need to additionally set \"Probe Mux\" register to specify the channel to be output. \"Probe\" register specifies the probing point in ASIC. The list of probing points is as follows</p> <ul> <li>None: Disable probe</li> <li>Out_PA_HG: Probe the high-gain pre-amplifier output</li> <li>Out_PA_LG: Probe the low-gain pre-amplifier output</li> <li>Out_ssh_HG: Probe the high-gain slow shaper output</li> <li>Out_ssh_LG: Probe the low-gain slow shaper output</li> <li>Out_fs: Probe the fast shaper output</li> </ul> <p>\"Probe Mux\" specifies the ASIC number to be output from the analog switch, and users can select the value between 1 to 4.</p>"},{"location":"software/software/#inputdacyml","title":"InputDAC.yml","text":"<p>Users can set the Input 8-bit DAC value channel by channel in each CITIROC by this file. The register can take values between 0 to 255.</p>"},{"location":"software/software/#discrimaskyml","title":"DiscriMask.yml","text":"<p>Users can mask the discriminator output channel by channel by this file. If users set 1, the output at that channel is blocked. Please use this register to block a noisy channel.</p>"},{"location":"software/software/#usage","title":"Usage","text":"<p>Users can use this program as follows. Since this program requires many arguments, the developer recommends to write a shell script to hide them when you need to manage multiple CIRASAME boards. The developer prepares a simple shell script (runControl.sh) as an example.</p> <pre><code>femcitiroc_control -ip=192.168.10.16 -yaml=RegisterValue_16.yml -yaml=InputDAC_16.yml -yaml=DiscriMask_16.yml -sc -read\n</code></pre> <p>Note that the probe function connects the internal probing points and the the external signal line without a buffer. Then, the probe line looks like a long stub resulting a performance deterioration. Please reset the probe output with the <code>-probe-off</code> option before doing the measurement.</p>"}]}